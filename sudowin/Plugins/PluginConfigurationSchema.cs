//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace Sudowin.Plugins {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
	[System.Xml.Serialization.XmlRootAttribute( "PluginConfigurationSchema" )]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PluginConfigurationSchema : System.Data.DataSet {
        
        private pluginsDataTable tableplugins;
        
        private pluginDataTable tableplugin;
        
        private System.Data.DataRelation relationplugins_plugin;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PluginConfigurationSchema() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PluginConfigurationSchema(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["plugins"] != null)) {
                    base.Tables.Add(new pluginsDataTable(ds.Tables["plugins"]));
                }
                if ((ds.Tables["plugin"] != null)) {
                    base.Tables.Add(new pluginDataTable(ds.Tables["plugin"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pluginsDataTable plugins {
            get {
                return this.tableplugins;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public pluginDataTable plugin {
            get {
                return this.tableplugin;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            PluginConfigurationSchema cln = ((PluginConfigurationSchema)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["plugins"] != null)) {
                    base.Tables.Add(new pluginsDataTable(ds.Tables["plugins"]));
                }
                if ((ds.Tables["plugin"] != null)) {
                    base.Tables.Add(new pluginDataTable(ds.Tables["plugin"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableplugins = ((pluginsDataTable)(base.Tables["plugins"]));
            if ((initTable == true)) {
                if ((this.tableplugins != null)) {
                    this.tableplugins.InitVars();
                }
            }
            this.tableplugin = ((pluginDataTable)(base.Tables["plugin"]));
            if ((initTable == true)) {
                if ((this.tableplugin != null)) {
                    this.tableplugin.InitVars();
                }
            }
            this.relationplugins_plugin = this.Relations["plugins_plugin"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "pluginConfiguration";
            this.Prefix = "";
            this.Namespace = "http://sudowin.sourceforge.net/schemas/PluginConfiguration/";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableplugins = new pluginsDataTable();
            base.Tables.Add(this.tableplugins);
            this.tableplugin = new pluginDataTable();
            base.Tables.Add(this.tableplugin);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("plugins_plugin", new System.Data.DataColumn[] {
                        this.tableplugins.plugins_IdColumn}, new System.Data.DataColumn[] {
                        this.tableplugin.plugins_IdColumn});
            this.tableplugin.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationplugins_plugin = new System.Data.DataRelation("plugins_plugin", new System.Data.DataColumn[] {
                        this.tableplugins.plugins_IdColumn}, new System.Data.DataColumn[] {
                        this.tableplugin.plugins_IdColumn}, false);
            this.relationplugins_plugin.Nested = true;
            this.Relations.Add(this.relationplugins_plugin);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeplugins() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeplugin() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            PluginConfigurationSchema ds = new PluginConfigurationSchema();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void pluginsRowChangeEventHandler(object sender, pluginsRowChangeEvent e);
        
        public delegate void pluginRowChangeEventHandler(object sender, pluginRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pluginsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnplugins_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginsDataTable() {
                this.TableName = "plugins";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pluginsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pluginsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn plugins_IdColumn {
                get {
                    return this.columnplugins_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginsRow this[int index] {
                get {
                    return ((pluginsRow)(this.Rows[index]));
                }
            }
            
            public event pluginsRowChangeEventHandler pluginsRowChanging;
            
            public event pluginsRowChangeEventHandler pluginsRowChanged;
            
            public event pluginsRowChangeEventHandler pluginsRowDeleting;
            
            public event pluginsRowChangeEventHandler pluginsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpluginsRow(pluginsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginsRow AddpluginsRow() {
                pluginsRow rowpluginsRow = ((pluginsRow)(this.NewRow()));
                rowpluginsRow.ItemArray = new object[] {
                        null};
                this.Rows.Add(rowpluginsRow);
                return rowpluginsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                pluginsDataTable cln = ((pluginsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new pluginsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnplugins_Id = base.Columns["plugins_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnplugins_Id = new System.Data.DataColumn("plugins_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnplugins_Id);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnplugins_Id}, true));
                this.columnplugins_Id.AutoIncrement = true;
                this.columnplugins_Id.AllowDBNull = false;
                this.columnplugins_Id.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginsRow NewpluginsRow() {
                return ((pluginsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new pluginsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(pluginsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pluginsRowChanged != null)) {
                    this.pluginsRowChanged(this, new pluginsRowChangeEvent(((pluginsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pluginsRowChanging != null)) {
                    this.pluginsRowChanging(this, new pluginsRowChangeEvent(((pluginsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pluginsRowDeleted != null)) {
                    this.pluginsRowDeleted(this, new pluginsRowChangeEvent(((pluginsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pluginsRowDeleting != null)) {
                    this.pluginsRowDeleting(this, new pluginsRowChangeEvent(((pluginsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepluginsRow(pluginsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                PluginConfigurationSchema ds = new PluginConfigurationSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pluginsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class pluginDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnassemblyString;
            
            private System.Data.DataColumn columnserverType;
            
            private System.Data.DataColumn columnserverLifetime;
            
            private System.Data.DataColumn columnconnectionString;
            
            private System.Data.DataColumn columnschemaUri;
            
            private System.Data.DataColumn columnenabled;
            
            private System.Data.DataColumn columnactivationData;
            
            private System.Data.DataColumn columnpluginType;
            
            private System.Data.DataColumn columnplugins_Id;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginDataTable() {
                this.TableName = "plugin";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pluginDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected pluginDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn assemblyStringColumn {
                get {
                    return this.columnassemblyString;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn serverTypeColumn {
                get {
                    return this.columnserverType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn serverLifetimeColumn {
                get {
                    return this.columnserverLifetime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn connectionStringColumn {
                get {
                    return this.columnconnectionString;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn schemaUriColumn {
                get {
                    return this.columnschemaUri;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn enabledColumn {
                get {
                    return this.columnenabled;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn activationDataColumn {
                get {
                    return this.columnactivationData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn pluginTypeColumn {
                get {
                    return this.columnpluginType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn plugins_IdColumn {
                get {
                    return this.columnplugins_Id;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginRow this[int index] {
                get {
                    return ((pluginRow)(this.Rows[index]));
                }
            }
            
            public event pluginRowChangeEventHandler pluginRowChanging;
            
            public event pluginRowChangeEventHandler pluginRowChanged;
            
            public event pluginRowChangeEventHandler pluginRowDeleting;
            
            public event pluginRowChangeEventHandler pluginRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddpluginRow(pluginRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginRow AddpluginRow(string assemblyString, string serverType, int serverLifetime, string connectionString, string schemaUri, bool enabled, string activationData, string pluginType, pluginsRow parentpluginsRowByplugins_plugin) {
                pluginRow rowpluginRow = ((pluginRow)(this.NewRow()));
                rowpluginRow.ItemArray = new object[] {
                        assemblyString,
                        serverType,
                        serverLifetime,
                        connectionString,
                        schemaUri,
                        enabled,
                        activationData,
                        pluginType,
                        parentpluginsRowByplugins_plugin[0]};
                this.Rows.Add(rowpluginRow);
                return rowpluginRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                pluginDataTable cln = ((pluginDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new pluginDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnassemblyString = base.Columns["assemblyString"];
                this.columnserverType = base.Columns["serverType"];
                this.columnserverLifetime = base.Columns["serverLifetime"];
                this.columnconnectionString = base.Columns["connectionString"];
                this.columnschemaUri = base.Columns["schemaUri"];
                this.columnenabled = base.Columns["enabled"];
                this.columnactivationData = base.Columns["activationData"];
                this.columnpluginType = base.Columns["pluginType"];
                this.columnplugins_Id = base.Columns["plugins_Id"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnassemblyString = new System.Data.DataColumn("assemblyString", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnassemblyString);
                this.columnserverType = new System.Data.DataColumn("serverType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnserverType);
                this.columnserverLifetime = new System.Data.DataColumn("serverLifetime", typeof(int), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnserverLifetime);
                this.columnconnectionString = new System.Data.DataColumn("connectionString", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnconnectionString);
                this.columnschemaUri = new System.Data.DataColumn("schemaUri", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnschemaUri);
                this.columnenabled = new System.Data.DataColumn("enabled", typeof(bool), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnenabled);
                this.columnactivationData = new System.Data.DataColumn("activationData", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnactivationData);
                this.columnpluginType = new System.Data.DataColumn("pluginType", typeof(string), null, System.Data.MappingType.Attribute);
                base.Columns.Add(this.columnpluginType);
                this.columnplugins_Id = new System.Data.DataColumn("plugins_Id", typeof(int), null, System.Data.MappingType.Hidden);
                base.Columns.Add(this.columnplugins_Id);
                this.columnassemblyString.AllowDBNull = false;
                this.columnassemblyString.Namespace = "";
                this.columnserverType.Namespace = "";
                this.columnserverType.DefaultValue = ((string)("SingleCall"));
                this.columnserverLifetime.Namespace = "";
                this.columnserverLifetime.DefaultValue = ((int)(0));
                this.columnconnectionString.Namespace = "";
                this.columnschemaUri.Namespace = "";
                this.columnenabled.Namespace = "";
                this.columnenabled.DefaultValue = ((bool)(true));
                this.columnactivationData.Namespace = "";
                this.columnpluginType.AllowDBNull = false;
                this.columnpluginType.Namespace = "";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginRow NewpluginRow() {
                return ((pluginRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new pluginRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(pluginRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.pluginRowChanged != null)) {
                    this.pluginRowChanged(this, new pluginRowChangeEvent(((pluginRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.pluginRowChanging != null)) {
                    this.pluginRowChanging(this, new pluginRowChangeEvent(((pluginRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.pluginRowDeleted != null)) {
                    this.pluginRowDeleted(this, new pluginRowChangeEvent(((pluginRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.pluginRowDeleting != null)) {
                    this.pluginRowDeleting(this, new pluginRowChangeEvent(((pluginRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovepluginRow(pluginRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                PluginConfigurationSchema ds = new PluginConfigurationSchema();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "pluginDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class pluginsRow : System.Data.DataRow {
            
            private pluginsDataTable tableplugins;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pluginsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableplugins = ((pluginsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int plugins_Id {
                get {
                    return ((int)(this[this.tableplugins.plugins_IdColumn]));
                }
                set {
                    this[this.tableplugins.plugins_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginRow[] GetpluginRows() {
                return ((pluginRow[])(base.GetChildRows(this.Table.ChildRelations["plugins_plugin"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class pluginRow : System.Data.DataRow {
            
            private pluginDataTable tableplugin;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal pluginRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableplugin = ((pluginDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string assemblyString {
                get {
                    return ((string)(this[this.tableplugin.assemblyStringColumn]));
                }
                set {
                    this[this.tableplugin.assemblyStringColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string serverType {
                get {
                    try {
                        return ((string)(this[this.tableplugin.serverTypeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'serverType\' in table \'plugin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplugin.serverTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int serverLifetime {
                get {
                    try {
                        return ((int)(this[this.tableplugin.serverLifetimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'serverLifetime\' in table \'plugin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplugin.serverLifetimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string connectionString {
                get {
                    try {
                        return ((string)(this[this.tableplugin.connectionStringColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'connectionString\' in table \'plugin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplugin.connectionStringColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string schemaUri {
                get {
                    try {
                        return ((string)(this[this.tableplugin.schemaUriColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'schemaUri\' in table \'plugin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplugin.schemaUriColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool enabled {
                get {
                    try {
                        return ((bool)(this[this.tableplugin.enabledColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'enabled\' in table \'plugin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplugin.enabledColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string activationData {
                get {
                    try {
                        return ((string)(this[this.tableplugin.activationDataColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'activationData\' in table \'plugin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplugin.activationDataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string pluginType {
                get {
                    return ((string)(this[this.tableplugin.pluginTypeColumn]));
                }
                set {
                    this[this.tableplugin.pluginTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int plugins_Id {
                get {
                    try {
                        return ((int)(this[this.tableplugin.plugins_IdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'plugins_Id\' in table \'plugin\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableplugin.plugins_IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginsRow pluginsRow {
                get {
                    return ((pluginsRow)(this.GetParentRow(this.Table.ParentRelations["plugins_plugin"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["plugins_plugin"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsserverTypeNull() {
                return this.IsNull(this.tableplugin.serverTypeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetserverTypeNull() {
                this[this.tableplugin.serverTypeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsserverLifetimeNull() {
                return this.IsNull(this.tableplugin.serverLifetimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetserverLifetimeNull() {
                this[this.tableplugin.serverLifetimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsconnectionStringNull() {
                return this.IsNull(this.tableplugin.connectionStringColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetconnectionStringNull() {
                this[this.tableplugin.connectionStringColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsschemaUriNull() {
                return this.IsNull(this.tableplugin.schemaUriColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetschemaUriNull() {
                this[this.tableplugin.schemaUriColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsenabledNull() {
                return this.IsNull(this.tableplugin.enabledColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetenabledNull() {
                this[this.tableplugin.enabledColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsactivationDataNull() {
                return this.IsNull(this.tableplugin.activationDataColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetactivationDataNull() {
                this[this.tableplugin.activationDataColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isplugins_IdNull() {
                return this.IsNull(this.tableplugin.plugins_IdColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setplugins_IdNull() {
                this[this.tableplugin.plugins_IdColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class pluginsRowChangeEvent : System.EventArgs {
            
            private pluginsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginsRowChangeEvent(pluginsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class pluginRowChangeEvent : System.EventArgs {
            
            private pluginRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginRowChangeEvent(pluginRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public pluginRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
